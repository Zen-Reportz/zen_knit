{"version":3,"file":"extension.js","mappings":"yHACA,cACA,SACA,QAGA,sBAA2BA,GACvB,MACMC,EADgBC,EAAOC,UAAUC,iBAAiB,YAClBC,IAAIL,EAAM,QAEhD,OAAO,IAAIM,SAAQ,CAACC,EAASC,KACzB,GAAIP,MAAAA,EACAO,EAAO,IAAIC,MAAMT,EAAM,+BACpB,CACH,IAAIU,EAAuB,GAC3B,OAAQC,EAAGC,YACP,IAAK,QAASF,EAAe,SAAWT,EACpC,MACJ,IAAK,QACL,IAAK,SACDS,EAAe,SAAWT,EAGlCY,EAAGC,KAAKJ,GAAc,CAACK,EAAOC,EAAQC,KACnB,KAAXD,EACAT,EAAQN,GAGRO,EAAO,IAAIC,MAAMT,EAAM,iCAQ3C,qBAA0BA,GAGtB,OAFsBE,EAAOC,UAAUC,iBAAiB,YAClBC,IAAIL,EAAM,U,kFCtCpD,eAMA,qBAA0BkB,GACtB,OAAOhB,EAAOiB,UAAUC,uCAAuC,kBAAmB,CAC9EC,qCAAqCC,GAkBjC,OAjBAC,QAAQC,IAAI,aAiBL,CAACtB,EAAOuB,SAASC,SAtBjBC,EAsBmCL,EAtBNK,EAAIC,cAAc,IAAI1B,EAAO2B,MAAM,EAAG,EAAGC,OAAOC,UAAWD,OAAOC,aAQlF,KARd,IAACJ,O,sFCJnB,eAEA,2BACI,OAAOzB,EAAO8B,OAAOC,oBAAoB,c,4ECH7C,eACA,QACA,SACA,QAGA,gBAAqBf,GA4BjB,OA1BYhB,EAAOgC,SAASC,0BAA0B,yBAAyBd,UAE3E,GAAInB,EAAO8B,OAAOI,iBAAkB,CAChC,MAAMC,EAAkBnC,EAAO8B,OAAOI,iBAAiBd,SACjDgB,QAAa,IAAAC,YAAW,QAC9B,IAAIC,GAAS,IAAAC,WAAU,UACvB,IAAMC,IAAKC,GAAcC,EAAKC,MAAMR,EAAgBS,IAAIF,WACzCG,IAAXP,IACAA,EAASG,EAAUK,YAEvB,MAAMC,EAAI,IAAIC,KAEdhC,EAAUiC,WAAW,eAAgBd,EAAgBS,IAAIM,OAAS,QAAUH,EAAEI,eAC9ExC,EAAGC,KAAKwB,EAAO,OAASD,EAAgBS,IAAIM,OAAS,SAAYZ,GAAQ,CAACzB,EAAOC,EAAQC,KAGrF,GAFAC,EAAUiC,WAAWnC,GACrBE,EAAUiC,WAAWlC,GACjBF,EAIA,OAHAG,EAAUiC,WAAWpC,EAAMuC,cAE3BpD,EAAO8B,OAAOuB,iBAAiB,mDAGnCrD,EAAO8B,OAAOwB,uBAAuB,qCAAwChB,Y,QC9B7FiB,EAAOC,QAAUC,QAAQ,W,OCAzBF,EAAOC,QAAUC,QAAQ,kB,OCAzBF,EAAOC,QAAUC,QAAQ,O,OCAzBF,EAAOC,QAAUC,QAAQ,UCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBf,IAAjBgB,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAM,EAAoBF,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uGCnBf,eACA,SACA,QAGA,oBAAyBO,GAExB,MAAMC,GAAY,IAAAC,iBAClBD,EAAUf,WAAW,mCAOrBc,EAAQG,cAAcC,MAAK,IAAA/B,MAAK4B,IAEhCD,EAAQG,cAAcC,MAAK,IAAAC,WAAUJ,KAItC,2B","sources":["webpack://vscode-zen-knit/./src/core/command_line.ts","webpack://vscode-zen-knit/./src/core/format.ts","webpack://vscode-zen-knit/./src/core/knit_channel.ts","webpack://vscode-zen-knit/./src/core/publish.ts","webpack://vscode-zen-knit/external commonjs \"vscode\"","webpack://vscode-zen-knit/external node-commonjs \"child_process\"","webpack://vscode-zen-knit/external node-commonjs \"os\"","webpack://vscode-zen-knit/external node-commonjs \"path\"","webpack://vscode-zen-knit/webpack/bootstrap","webpack://vscode-zen-knit/./src/extension.ts"],"sourcesContent":["\nimport os = require('os');\nimport * as vscode from 'vscode';\nimport cp = require('child_process');\nimport { resolveCliPathFromVSCodeExecutablePath } from '@vscode/test-electron';\n\nexport function getCommand(cmd: string): Promise<string> {\n    const configuration = vscode.workspace.getConfiguration('zen-knit');\n    const command = <string>configuration.get(cmd + 'Path');\n\n    return new Promise((resolve, reject) => {\n        if (command === null || command === undefined) {\n            reject(new Error(cmd + ' not defined in config'));\n        } else {\n            let checkCommand: string = \"\";\n            switch (os.platform()) {\n                case \"win32\": checkCommand = 'where ' + command;\n                    break;\n                case \"linux\":\n                case \"darwin\":\n                    checkCommand = 'which ' + command;\n\n            }\n            cp.exec(checkCommand, (error, stdout, stderr) => {\n                if (stdout !== \"\") {\n                    resolve(command);\n                }\n                else {\n                    reject(new Error(cmd + ' not defined in path'));\n                }\n            });\n        }\n    });\n}\n\n\nexport function getOutput(cmd: string): string {\n    const configuration = vscode.workspace.getConfiguration('zen-knit');\n    const command = <string>configuration.get(cmd + 'Path');\n    return command\n}\n","import * as vscode from 'vscode';\nimport { getCommand } from './command_line';\nimport cp = require('child_process');\n\nconst fullRange = (doc: vscode.TextDocument) => doc.validateRange(new vscode.Range(0, 0, Number.MAX_VALUE, Number.MAX_VALUE));\n\nexport function formatDoc(myChannel: vscode.OutputChannel){\n    return vscode.languages.registerDocumentFormattingEditProvider('zen-knit-format', {\n        async provideDocumentFormattingEdits(document: vscode.TextDocument): Promise<vscode.TextEdit[]> {\n            console.log(\"hi inside\");\n            // const fullText = document.getText();\n            // myChannel.appendLine(fullText)\n            let finalDocument = \"\";\n            // const autopep8Command = await getCommand('autopep8');\n            // // let nowebReplace = fullText.replace(/(<<.*?>>=)(.*?)(@)/gms, (_, openingTag, code, closingTag) => {\n            // let nowebReplace = fullText.replace(/(<<[^<>]*>>=)(.*?)(@)/gms, (_, openingTag, code, closingTag) => {\n            //     let formattedPython = cp.execSync(autopep8Command + ' -', {\n            //         input: code\n            //     }).toString();\n            //     return \"\\\\begin{noweb}\\n\" + openingTag + formattedPython + closingTag + \"\\n\\\\end{noweb}\";\n            // });\n            // const latexindentCommand = await getCommand('latexindent');\n            // let indentedDocument = cp.execSync(latexindentCommand + ' -y=\"verbatimEnvironments:noweb:1', {\n            //     input: nowebReplace\n            // }).toString();\n            // let finalDocument = indentedDocument.replace(/^\\s*\\\\begin{noweb}.*?(<<.*?>>=.*?@).*?\\\\end{noweb}\\h*$/gms, (_, code) => code);\n            return [vscode.TextEdit.replace(fullRange(document), finalDocument)];\n        }\n    });\n\n}","import * as vscode from 'vscode';\n\nexport function createchannel(){\n    return vscode.window.createOutputChannel(\"Zen-Knit\");\n}\n","import * as vscode from 'vscode';\nimport path = require('path');\nimport { getCommand, getOutput } from './command_line';\nimport cp = require('child_process');\nimport * as fs from 'fs';\n\nexport function knit(myChannel: vscode.OutputChannel){\n\n    let build = vscode.commands.registerTextEditorCommand('vscode-zen-knit.build', async () => {\n\n        if (vscode.window.activeTextEditor) {\n            const currentDocument = vscode.window.activeTextEditor.document;\n            const knit = await getCommand('knit');\n            var output = getOutput('output');\n            let { dir: parentDir } = path.parse(currentDocument.uri.path);\n            if (output === undefined){\n                output = parentDir.toString()\n            }\n            const d = new Date();\n\n            myChannel.appendLine(\"processing: \"+ currentDocument.uri.fsPath + \" at: \" + d.toISOString());\n            cp.exec(knit + ' -f ' + currentDocument.uri.fsPath + \" -ofd \" +  output, (error, stdout, stderr) => {\n                myChannel.appendLine(stdout);\n                myChannel.appendLine(stderr);\n                if (error) {\n                    myChannel.appendLine(error.message);\n    \n                    vscode.window.showErrorMessage(\"zen-knit : an error ocurred while building file\");\n                    return;\n                }\n                vscode.window.showInformationMessage(\"zen-knit : outputfile is build at \" +  output);\n            });\n        }\n    })\n    return build\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict';\nimport * as vscode from 'vscode';\nimport { formatDoc } from './core/format';\nimport { createchannel } from './core/knit_channel';\nimport { knit } from './core/publish';\n\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconst mychannel = createchannel()\n\tmychannel.appendLine('vscode-zen-knit\" is now active!')\n\n\t// // vscode.window.showInformationMessage('Zen Knit extension is activated');\t\n\t// let disposable = vscode.commands.registerCommand('vscode-zen-knit.helloWorld', () => {\n\t// \tvscode.window.showInformationMessage('Hello World from vscode-zen-knit!');\n\t// });\n\n\tcontext.subscriptions.push(knit(mychannel));\n\n\tcontext.subscriptions.push(formatDoc(mychannel));\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["cmd","command","vscode","workspace","getConfiguration","get","Promise","resolve","reject","Error","checkCommand","os","platform","cp","exec","error","stdout","stderr","myChannel","languages","registerDocumentFormattingEditProvider","async","document","console","log","TextEdit","replace","doc","validateRange","Range","Number","MAX_VALUE","window","createOutputChannel","commands","registerTextEditorCommand","activeTextEditor","currentDocument","knit","getCommand","output","getOutput","dir","parentDir","path","parse","uri","undefined","toString","d","Date","appendLine","fsPath","toISOString","message","showErrorMessage","showInformationMessage","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","mychannel","createchannel","subscriptions","push","formatDoc"],"sourceRoot":""}